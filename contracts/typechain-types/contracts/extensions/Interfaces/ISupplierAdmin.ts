/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ISupplierAdminInterface extends utils.Interface {
  functions: {
    "decreaseSupplierAllowance(address,uint256)": FunctionFragment;
    "grantSupplierRole(address,uint256)": FunctionFragment;
    "grantUnlimitedSupplierRole(address)": FunctionFragment;
    "increaseSupplierAllowance(address,uint256)": FunctionFragment;
    "isUnlimitedSupplierAllowance(address)": FunctionFragment;
    "resetSupplierAllowance(address)": FunctionFragment;
    "revokeSupplierRole(address)": FunctionFragment;
    "supplierAllowance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "decreaseSupplierAllowance"
      | "grantSupplierRole"
      | "grantUnlimitedSupplierRole"
      | "increaseSupplierAllowance"
      | "isUnlimitedSupplierAllowance"
      | "resetSupplierAllowance"
      | "revokeSupplierRole"
      | "supplierAllowance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decreaseSupplierAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantSupplierRole",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantUnlimitedSupplierRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSupplierAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnlimitedSupplierAllowance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetSupplierAllowance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSupplierRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supplierAllowance",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseSupplierAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantSupplierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantUnlimitedSupplierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSupplierAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUnlimitedSupplierAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSupplierAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSupplierRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplierAllowance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISupplierAdmin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISupplierAdminInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decreaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantSupplierRole(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantUnlimitedSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isUnlimitedSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    resetSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  decreaseSupplierAllowance(
    supplier: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantSupplierRole(
    supplier: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantUnlimitedSupplierRole(
    supplier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseSupplierAllowance(
    supplier: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isUnlimitedSupplierAllowance(
    supplier: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  resetSupplierAllowance(
    supplier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeSupplierRole(
    supplier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplierAllowance(
    supplier: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    decreaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantSupplierRole(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantUnlimitedSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isUnlimitedSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    resetSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    decreaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantSupplierRole(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantUnlimitedSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isUnlimitedSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resetSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantSupplierRole(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantUnlimitedSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseSupplierAllowance(
      supplier: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isUnlimitedSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetSupplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeSupplierRole(
      supplier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplierAllowance(
      supplier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
