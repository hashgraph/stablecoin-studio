/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IStableCoinFactory {
  export type KeysStructStruct = {
    keyType: PromiseOrValue<BigNumberish>;
    PublicKey: PromiseOrValue<BytesLike>;
    isED25519: PromiseOrValue<boolean>;
  };

  export type KeysStructStructOutput = [BigNumber, string, boolean] & {
    keyType: BigNumber;
    PublicKey: string;
    isED25519: boolean;
  };

  export type TokenStructStruct = {
    tokenName: PromiseOrValue<string>;
    tokenSymbol: PromiseOrValue<string>;
    freeze: PromiseOrValue<boolean>;
    supplyType: PromiseOrValue<boolean>;
    tokenMaxSupply: PromiseOrValue<BigNumberish>;
    tokenInitialSupply: PromiseOrValue<BigNumberish>;
    tokenDecimals: PromiseOrValue<BigNumberish>;
    autoRenewAccountAddress: PromiseOrValue<string>;
    treasuryAddress: PromiseOrValue<string>;
    reserveAddress: PromiseOrValue<string>;
    reserveInitialAmount: PromiseOrValue<BigNumberish>;
    keys: IStableCoinFactory.KeysStructStruct[];
  };

  export type TokenStructStructOutput = [
    string,
    string,
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    BigNumber,
    IStableCoinFactory.KeysStructStructOutput[]
  ] & {
    tokenName: string;
    tokenSymbol: string;
    freeze: boolean;
    supplyType: boolean;
    tokenMaxSupply: BigNumber;
    tokenInitialSupply: BigNumber;
    tokenDecimals: number;
    autoRenewAccountAddress: string;
    treasuryAddress: string;
    reserveAddress: string;
    reserveInitialAmount: BigNumber;
    keys: IStableCoinFactory.KeysStructStructOutput[];
  };
}

export interface StableCoinFactoryInterface extends utils.Interface {
  functions: {
    "deployStableCoin((string,string,bool,bool,int64,uint64,uint32,address,address,address,uint256,(uint256,bytes,bool)[]),address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "deployStableCoin"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployStableCoin",
    values: [IStableCoinFactory.TokenStructStruct, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployStableCoin",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
}

export interface DeployedEventObject {
  arg0: string;
  arg1: string;
  arg2: string;
  arg3: string;
}
export type DeployedEvent = TypedEvent<
  [string, string, string, string],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface StableCoinFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StableCoinFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployStableCoin(
      requestedToken: IStableCoinFactory.TokenStructStruct,
      StableCoinContractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deployStableCoin(
    requestedToken: IStableCoinFactory.TokenStructStruct,
    StableCoinContractAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployStableCoin(
      requestedToken: IStableCoinFactory.TokenStructStruct,
      StableCoinContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string]>;
  };

  filters: {
    "Deployed(address,address,address,address)"(
      arg0?: null,
      arg1?: null,
      arg2?: null,
      arg3?: null
    ): DeployedEventFilter;
    Deployed(
      arg0?: null,
      arg1?: null,
      arg2?: null,
      arg3?: null
    ): DeployedEventFilter;
  };

  estimateGas: {
    deployStableCoin(
      requestedToken: IStableCoinFactory.TokenStructStruct,
      StableCoinContractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployStableCoin(
      requestedToken: IStableCoinFactory.TokenStructStruct,
      StableCoinContractAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
